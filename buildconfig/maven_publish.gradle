apply plugin: 'maven-publish'

afterEvaluate {// components.release 只有在配置完成之后，才能拿到值
    publishing {
        // 配置maven 仓库
        repositories { RepositoryHandler handler ->
            handler.mavenLocal()
        }
        publications { PublicationContainer publicationContainer ->
            maven(MavenPublication) {
                from components.release // 注释1:使用 Android Gradle 插件生成的组件，作为发布的内容
                //artifact sourceJar // 上传源码
                groupId = "com.songbin"
                artifactId = "libui"
                version = "1.0.0"
            }
        }
    }
}

//publishing {
    // 配置maven仓库，地址可以配置多个
//    repositories { RepositoryHandler handler ->
        //发布到默认的 本地maven 仓库 ，路径： USER_HOME/.m2/repository/
//        handler.mavenLocal()
        //指定地址
//        handler.maven {
//            url "${rootDir}/repo"
//        }
        //仓库用户名密码
//        handler.maven { MavenArtifactRepository mavenArtifactRepository ->
//            // maven 仓库地址
//            url 'http://10.0.192.56:8081/repository/core/'
//            // 访问仓库的 账号和密码
//            credentials {
//                username = "meiTest"
//                password = "123456"
//            }
//        }
//    }
//    afterEvaluate {
//
//    }
//    // 配置发布产物
//    publications { PublicationContainer publication ->
//        // 名称可以随便定义，这里定义成 maven，是因为我的 aar 包是发布到 maven 仓库的，所以这里为了见名知义，定义成了 maven
//        // 任务名称：maven
//        maven(MavenPublication) {// 容器可配置的信息 MavenPublication
//            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
//            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) } // 方式一：生成aar包
//            // artifact "$buildDir/outputs/aar/${project.name}-release.aar" // 方式二：指定生成的aar路径
//            groupId = "com.songbin"
//            artifactId = "libui"
//            version = "1.0.0"
//        }
//    }
//}